如何编译静态链接库？
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
JVMTM Tool Interface(java 虚拟机工具接口)
Version 1.2

What is the JVM Tool Interface?
什么是ｊａｖａ虚拟工具接口
The JVM Tool Interface (JVM TI) is a programming interface used by development and monitoring tools. It provides both a way to inspect the state and to control the execution of applications running in the JavaTM virtual machine (VM).
JVMTM工具接口（JVM TI）是开发和监控工具使用的编程接口。 它提供了一种检查状态并控制在JavaTM虚拟机（VM）中运行的应用程序的执行的方法。
JVM TI is intended to provide a VM interface for the full breadth of tools that need access to VM state, including but not limited to: profiling, debugging, monitoring, thread analysis, and coverage analysis tools.
JVM TI旨在为需要访问VM状态的全面工具提供VM接口，包括但不限于：分析，调试，监视，线程分析和覆盖分析工具。
JVM TI may not be available in all implementations of the JavaTM virtual machine.
JVM TI可能不适用于JavaTM虚拟机的所有实现。
JVM TI is a two-way interface. A client of JVM TI, hereafter called an agent, can be notified of interesting occurrences through events. JVM TI can query and control the application through many functions, either in response to events or independent of them.
JVM TI是一个双向接口。 客户端通过JVMTI设置代理，可以通过通知处理感兴趣的事件。 JVMTI可以通过许多功能来查询和控制应用程序，无论是响应事件还是独立于它们。
Agents run in the same process with and communicate directly with the virtual machine executing the application being examined. This communication is through a native interface (JVM TI). The native in-process interface allows maximal control with minimal intrusion on the part of a tool. Typically, agents are relatively compact. They can be controlled by a separate process which implements the bulk of a tool's function without interfering with the target application's normal execution.
代理程序在相同的进程中运行通过通信运行和检查虚拟机应用。 这种通信是通过一个本机接口（JVM TI）。 它们可以通过单独的进程控制，该进程实现了工具功能的大部分，而不会干扰目标应用程序的正常执行。

Architecture
架构
Tools can be written directly to JVM TI or indirectly through higher level interfaces. The Java Platform Debugger Architecture includes JVM TI, but also contains higher-level, out-of-process debugger interfaces. The higher-level interfaces are more appropriate than JVM TI for many tools. For more information on the Java Platform Debugger Architecture, see the Java Platform Debugger Architecture website.
工具可以直接写入JVM TI，也可以通过更高级别的接口间接写入。 Java平台调试器架构包括JVM TI，还包含更高级别的进程外调试器接口。 对于许多工具，更高级别的接口比JVM TI更合适。 有关Java Platform Debugger Architecture的更多信息，请参阅Java Platform Debugger Architecture网站。

Writing Agents
写代理
Agents can be written in any native language that supports C language calling conventions and C or C++ definitions.
代理可以用支持C语言调用约定和C或C ++定义的任何本地语言编写。
The function, event, data type, and constant definitions needed for using JVM TI are defined in the include file jvmti.h. To use these definitions add the J2SETM include directory to your include path and add
使用JVM TI所需的功能，事件，数据类型和常量定义在jvmti.h头文件中。 要使用这些定义，将J2SETM include目录添加
#include <jvmti.h>

to your source code.
你的代码中

Deploying Agents
部署代理
An agent is deployed in a platform specific manner but is typically the platform equivalent of a dynamic library. On the WindowsTM operating system, for example, an agent library is a "Dynamic Linked Library" (DLL). On the SolarisTM Operating Environment, an agent library is a shared object (.so file).
代理以平台特定的方式部署，但通常是与动态库相当的平台。 例如，在Windows操作系统上，代理库是“动态链接库”（DLL）。 在Solaris操作环境中，代理库是一个共享对象（.so文件）。
An agent may be started at VM startup by specifying the agent library name using a command line option. Some implementations may support a mechanism to start agents in the live phase. The details of how this is initiated are implementation specific.
可以通过使用命令行选项指定代理程序库名称，在虚拟机启动时启动代理。 一些实现可以支持在生存阶段启动代理的机制。 如何启动它的细节是具体的实现。


Statically Linked Agents (since version 1.2.3)
静态链接代理（自版本1.2.3起）
A native JVMTI Agent may be statically linked with the VM. The manner in which the library and VM image are combined is implementation-dependent. An agent L whose image has been combined with the VM is defined as statically linked if and only if the agent exports a function called Agent_OnLoad_L.
本地JVMTI代理可能与VM静态链接。 库和VM镜像的组合方式取决于实现。当代理使用静态链接库，虚拟机将之执行Agent_OnLoad_L函数。
If a statically linked agent L exports a function called Agent_OnLoad_L and a function called Agent_OnLoad, the Agent_OnLoad function will be ignored. If an agent L is statically linked, an Agent_OnLoad_L function will be invoked with the same arguments and expected return value as specified for the Agent_OnLoad function. An agent L that is statically linked will prohibit an agent of the same name from being loaded dynamically.
如果静态链接代理L导出名为Agent_OnLoad_L的函数和名为Agent_OnLoad的函数，则Agent_OnLoad函数将被忽略。 如果代理L静态链接，将使用与Agent_OnLoad函数相同的参数和预期返回值来调用Agent_OnLoad_L函数。 静态链接的代理L将禁止动态加载相同名称的代理。
The VM will invoke the Agent_OnUnload_L function of the agent, if such a function is exported, at the same point during VM execution as it would have called the dynamic entry point Agent_OnUnLoad. A statically loaded agent cannot be unloaded. The Agent_OnUnload_L function will still be called to do any other agent shutdown related tasks. If a statically linked agent L exports a function called Agent_OnUnLoad_L and a function called Agent_OnUnLoad, the Agent_OnUnLoad function will be ignored.
虚拟机将在虚拟机执行期间与调用动态入口点Agent_OnUnLoad的同一点调用代理程序的Agent_OnUnload_L函数（如果这样的函数被导出）。 无法卸载静态加载代理。 Agent_OnUnload_L函数仍将被调用来执行任何其他代理关闭相关任务。 如果静态链接代理L导出名为Agent_OnUnLoad_L的函数和名为Agent_OnUnLoad的函数，则Agent_OnUnLoad函数将被忽略。
If an agent L is statically linked, an Agent_OnAttach_L function will be invoked with the same arguments and expected return value as specified for the Agent_OnAttach function. If a statically linked agent L exports a function called Agent_OnAttach_L and a function called Agent_OnAttach, the Agent_OnAttach function will be ignored.
如果代理L静态链接，将使用与为Agent_OnAttach函数指定的相同参数和预期返回值来调用Agent_OnAttach_L函数。 如果静态链接代理L导出名为Agent_OnAttach_L的函数和名为Agent_OnAttach的函数，则Agent_OnAttach函数将被忽略。

Agent Command Line Options
代理命令行选项
The term "command-line option" is used below to mean options supplied in the JavaVMInitArgs argument to the JNI_CreateJavaVM function of the JNI Invocation API.
下面使用术语“命令行选项”来表示JNI调用API的JNI_CreateJavaVM函数的JavaVMInitArgs参数中提供的选项。
One of the two following command-line options is used on VM startup to properly load and run agents. These arguments identify the library containing the agent as well as an options string to be passed in at startup.
VM启动时使用以下两个命令行选项之一来正确加载和运行代理。 这些参数标识包含代理的库以及启动时要传递的选项字符串。
-agentlib:<agent-lib-name>=<options>
The name following -agentlib: is the name of the library to load. Lookup of the library, both its full name and location, proceeds in a platform-specific manner. Typically, the <agent-lib-name> is expanded to an operating system specific file name. The <options> will be passed to the agent on start-up. For example, if the option -agentlib:foo=opt1,opt2 is specified, the VM will attempt to load the shared library foo.dll from the system PATH under WindowsTM or libfoo.so from the LD_LIBRARY_PATH under the SolarisTM operating environment. If the agent library is statically linked into the executable then no actual loading takes place.
-agentlib后面的名称是要加载的库的名称。库的名称与路径根据平台特定的方式进行。 通常，将<agent-lib-name>扩展为操作系统特定的文件名。 <options>将在启动时传递给代理。 例如，如果指定了选项-agentlib：foo = opt1，opt2，虚拟机在Window系统PATH环境变量下查找foo.dll动态链接库，在Solaris系统LD_LIBRARY_PATH环境变量下查找foo.so动态链接库. 如果代理库静态链接到可执行文件中，则不会发生实际的加载。
-agentpath:<path-to-agent>=<options>
The path following -agentpath: is the absolute path from which to load the library. No library name expansion will occur. The <options> will be passed to the agent on start-up. For example, if the option -agentpath:c:\myLibs\foo.dll=opt1,opt2 is specified, the VM will attempt to load the shared library c:\myLibs\foo.dll. If the agent library is statically linked into the executable then no actual loading takes place.
-agentpath后面的路径：是加载库的绝对路径。 不会对库名称进行扩充。 <options>将在启动时传递给代理。 例如，如果选项-agentpath:c:\myLibs\foo.dll=opt1,opt2被指定，VM将尝试加载共享库c:\myLibs\foo.dll。 如果代理库静态链接到可执行文件中，则不会发生实际的加载。
For a dynamic shared library agent, the start-up routine Agent_OnLoad in the library will be invoked. If the agent library is statically linked into the executable then the system will attempt to invoke the Agent_OnLoad_<agent-lib-name> entry point where <agent-lib-name> is the basename of the agent. In the above example -agentpath:c:\myLibs\foo.dll=opt1,opt2, the system will attempt to find and call the Agent_OnLoad_foo start-up routine.
对于加载动态链接库，将调用库中Agent_OnLoad方法启动。 如果代理程序库是静态链接到可执行文件中，则系统将尝试调用Agent_OnLoad_ <agent-lib-name>入口点，其中<agent-lib-name>是代理的基本名称。 在上述示例-agentpath:c:\myLibs\foo.dll=opt1,opt2，系统将尝试查找并调用Agent_OnLoad_foo方法启动。
Libraries loaded with -agentlib: or -agentpath: will be searched for JNI native method implementations to facilitate the use of Java programming language code in tools, as is needed for bytecode instrumentation.
加载了-agentlib或-agentpath的库将被搜索JNI本机方法实现，以便在工具中使用Java编程语言代码，这是按字节码检测所需要的。
The agent libraries will be searched after all other libraries have been searched (agents wishing to override or intercept the native method implementations of non-agent methods can use the NativeMethodBind event).
在搜索所有其他库之后，将搜索代理程序库（希望覆盖或拦截非代理方法的本地方法实现的代理可以使用NativeMethodBind事件）。
These switches do the above and nothing more - they do not change the state of the VM or JVM TI. No command line options are needed to enable JVM TI or aspects of JVM TI, this is handled programmatically by the use of capabilities.
这些交换机执行上述操作，没有更多 - 它们不会更改VM或JVM TI的状态。 不需要命令行选项来启用JVM TI或JVM TI的各个方面，这是通过使用功能以编程方式处理的。

Agent Start-Up
启动代理
The VM starts each agent by invoking a start-up function. If the agent is started in the OnLoad phase the function Agent_OnLoad or Agent_OnLoad_L for statically linked agents will be invoked. If the agent is started in the live phase the function Agent_OnAttach or Agent_OnAttach_L for statically linked agents will be invoked. Exactly one call to a start-up function is made per agent.
VM通过调用启动函数来启动每个代理。 如果代理在OnLoad阶段启动，则将调用静态链接代理程序的Agent_OnLoad或Agent_OnLoad_L函数。 如果代理在实时阶段启动，则将调用静态链接代理程序的Agent_OnAttach或Agent_OnAttach_L函数。 每个代理人完全调用了启动功能。

Agent Start-Up (OnLoad phase)
启动代理(OnLoad 阶段)
If an agent is started during the OnLoad phase then its agent library must export a start-up function with the following prototype:
如果代理在OnLoad阶段启动，则其代理程序库必须使用以下原型导出启动函数：
JNIEXPORT jint JNICALL
Agent_OnLoad(JavaVM *vm, char *options, void *reserved)
Or for a statically linked agent named 'L':
或者以静态链接库代理
JNIEXPORT jint JNICALL
Agent_OnLoad_L(JavaVM *vm, char *options, void *reserved)
The VM will start the agent by calling this function. It will be called early enough in VM initialization that:
虚拟机将通过调用此函数启动代理。 在VM初始化中早期：

system properties may be set before they have been used in the start-up of the VM
可能在VM启动之前被使用系统属性
the full set of capabilities is still available (note that capabilities that configure the VM may only be available at this time--see the Capability function section)
完整的功能集仍然可用（请注意，配置VM的功能目前可能只能使用 - 请参阅功能部分）
no bytecodes have executed
没有执行字节码
no classes have been loaded
没有加载器
no objects have been created
没有创建任何对象

The VM will call the Agent_OnLoad or Agent_OnLoad_<agent-lib-name> function with <options> as the second argument - that is, using the command-line option examples, "opt1,opt2" will be passed to the char *options argument of Agent_OnLoad. The options argument is encoded as a modified UTF-8 string. If =<options> is not specified, a zero length string is passed to options. The lifespan of the options string is the Agent_OnLoad or Agent_OnLoad_<agent-lib-name> call. If needed beyond this time the string or parts of the string must be copied. The period between when Agent_OnLoad is called and when it returns is called the OnLoad phase. Since the VM is not initialized during the OnLoad phase, the set of allowed operations inside Agent_OnLoad is restricted (see the function descriptions for the functionality available at this time). The agent can safely process the options and set event callbacks with SetEventCallbacks. Once the VM initialization event is received (that is, the VMInit callback is invoked), the agent can complete its initialization.
虚拟机执行Agent_OnLoad或Agent_OnLoad_<agent-lib-name>函数中的<options>是第二个参数选择,利用命令行选择的例子,"opt1,opt2"将以char类型指针参数*options传递给Agent_OnLoad函数.这个options字符参数是经过UTF-8编码修改过的.如果=<options>没有定义,空字符串传递给选项,options字符串的周期是Agent_OnLoad或Agent_OnLoad_ <agent-lib-name>调用. 如果需要超出这个周期使用，字符串或字符串的部分必须被复制. 调用Agent_OnLoad和返回的时间间隔称为OnLoad阶段。 由于虚拟机在OnLoad阶段期间未初始化,Agent_OnLoad中允许的操作集合受到限制（请参阅此时可用功能的功能说明）. 代理可以安全地处理选项并使用SetEventCallbacks设置事件回调.一旦接收到VM初始化事件（即调用VMInit回调），代理可以完成其初始化。

Rationale: Early startup is required so that agents can set the desired capabilities, many of which must be set before the VM is initialized. In JVMDI, the -Xdebug command-line option provided very coarse-grain control of capabilities. JVMPI implementations use various tricks to provide a single "JVMPI on" switch. No reasonable command-line option could provide the fine-grain of control required to balance needed capabilities vs performance impact. Early startup is also needed so that agents can control the execution environment - modifying the file system and system properties to install their functionality.
解释:需要早期启动，以便代理可以设置所需的功能，其中许多功能必须在VM初始化之前进行设置。在JVMDI中，-Xdebug命令行选项提供了非常粗粒度的功能控制。JVMPI实现使用各种技巧来提供单个“JVMPI on”开关。没有合理的命令行选项可以提供平衡所需能力与性能影响所需的精细控制。还需要早期启动，以便代理可以控制执行环境 - 修改文件系统和系统属性以安装其功能。

The return value from Agent_OnLoad or Agent_OnLoad_<agent-lib-name> is used to indicate an error. Any value other than zero indicates an error and causes termination of the VM.
来自Agent_OnLoad或Agent_OnLoad_ <agent-lib-name>的返回值用于指示错误。 除零之外的任何值都表示错误，并导致VM的终止。

Agent Start-Up (Live phase)
启动代理(活动阶段)
A VM may support a mechanism that allows agents to be started in the VM during the live phase. The details of how this is supported, are implementation specific. For example, a tool may use some platform specific mechanism, or implementation specific API, to attach to the running VM, and request it start a given agent.
虚拟机可能支持在实时阶段允许代理在VM中启动的机制。 有关如何支持的细节是具体实现。 例如，一个工具可能会使用一些特定于平台的机制，或实现特定的API来附加到正在运行的VM，并请求它启动一个给定的代理。

If an agent is started during the live phase then its agent library must export a start-up function with the following prototype:
如果代理在实时阶段启动，则其代理程序库必须使用以下原型导出启动函数：
JNIEXPORT jint JNICALL
Agent_OnAttach(JavaVM* vm, char *options, void *reserved)
Or for a statically linked agent named 'L':
或者静态库代理函数
JNIEXPORT jint JNICALL
Agent_OnAttach_L(JavaVM* vm, char *options, void *reserved)
The VM will start the agent by calling this function. It will be called in the context of a thread that is attached to the VM. The first argument <vm> is the Java VM. The <options> argument is the startup options provided to the agent. <options> is encoded as a modified UTF-8 string. If startup options were not provided, a zero length string is passed to options. The lifespan of the options string is the Agent_OnAttach or Agent_OnAttach_<agent-lib-name> call. If needed beyond this time the string or parts of the string must be copied.
虚拟机将通过调用此函数启动代理。它将在连接到VM的线程的上下文中被调用。第一个参数<vm>是Java VM。 <options>参数是提供给代理的启动选项.<options> is encoded as a modified UTF-8 string.如果未提供启动选项，则将空字符串传递给选项。 选项字符串的周期是Agent_OnAttach或Agent_OnAttach_ <agent-lib-name>调用。 如果需要超出这个周期，字符串或字符串的部分必须被复制。
Note that some capabilities may not be available in the live phase.
请注意，实时阶段可能无法使用某些功能。
The Agent_OnAttach or Agent_OnAttach_<agent-lib-name > function initializes the agent and returns a value to the VM to indicate if an error occurred. Any value other than zero indicates an error. An error does not cause the VM to terminate. Instead the VM ignores the error, or takes some implementation specific action -- for example it might print an error to standard error, or record the error in a system log.
Agent_OnAttach或Agent_OnAttach_ <agent-lib-name>函数初始化代理并向VM返回一个值，以指示是否发生错误。 0以外的任何值都表示错误。 错误不会导致VM终止。 而是忽略该错误，或者采取一些实现特定的操作 - 例如它可能会将错误打印到标准错误，或在系统日志中记录错误。

Agent Shutdown

The library may optionally export a shutdown function with the following prototype:
库可以选择导出具有以下原型的关闭功能：
JNIEXPORT void JNICALL
Agent_OnUnload(JavaVM *vm)
Or for a statically linked agent named 'L':
或者静态链接库函数
JNIEXPORT void JNICALL
Agent_OnUnload_L(JavaVM *vm)
This function will be called by the VM when the library is about to be unloaded. The library will be unloaded (unless it is statically linked into the executable) and this function will be called if some platform specific mechanism causes the unload (an unload mechanism is not specified in this document) or the library is (in effect) unloaded by the termination of the VM whether through normal termination or VM failure, including start-up failure. Uncontrolled shutdown is, of couse, an exception to this rule. Note the distinction between this function and the VM Death event: for the VM Death event to be sent, the VM must have run at least to the point of initialization and a valid JVM TI environment must exist which has set a callback for VMDeath and enabled the event. None of these are required for Agent_OnUnload or Agent_OnUnload_<agent-lib-name> and this function is also called if the library is unloaded for other reasons. In the case that a VM Death event is sent, it will be sent before this function is called (assuming this function is called due to VM termination). This function can be used to clean-up resources allocated by the agent.
当该库即将卸载时，该函数将由VM调用。库将被卸载（除非它被静态链接到可执行文件中），并且如果某些平台特定的机制导致卸载（在本文档中未指定卸载机制）或者库（实际上）卸载，则该函数将被调用 VM的终止是否通过正常终止或VM故障，包括启动失败,当然，不受控制的停机是这个规则的例外。请注意此功能与VM死亡事件之间的区别：为了发送VM死亡事件，VM必须至少运行到初始化阶段，并且必须存在有效的JVM TI环境，该环境已为VMDeath设置回调并启用 事件。Agent_OnUnload或Agent_OnUnload_ <agent-lib-name>都不需要这些功能，如果库由于其他原因卸载，也会调用此函数。在发送VM死亡事件的情况下，将在调用此函数之前发送（假定由于VM终止而调用此函数）。 此功能可用于清理代理分配的资源。

JAVA_TOOL_OPTIONS

Since the command-line cannot always be accessed or modified, for example in embedded VMs or simply VMs launched deep within scripts, a JAVA_TOOL_OPTIONS variable is provided so that agents may be launched in these cases.
由于命令行不能总是被访问或修改，例如在嵌入式虚拟机中，或简单地在脚本中深入启动的虚拟机，提供了一个JAVA_TOOL_OPTIONS变量，以便在这些情况下启动代理。
Platforms which support environment variables or other named strings, may support the JAVA_TOOL_OPTIONS variable. This variable will be broken into options at white-space boundaries. White-space characters include space, tab, carriage-return, new-line, vertical-tab, and form-feed. Sequences of white-space characters are considered equivalent to a single white-space character. No white-space is included in the options unless quoted. Quoting is as follows:
支持环境变量或其他命名字符串的平台可能支持JAVA_TOOL_OPTIONS变量。 该变量将被分解为空白边界的选项。 空白字符包括空格，制表符，回车符，新行，垂直标签和表单。 白空格字符的序列被认为等同于单个空格字符。 除非引用，否则选项中不包括空格。 引用如下：
All characters enclosed between a pair of single quote marks (''), except a single quote, are quoted.
引用一个单引号（''）之外的所有字符，除单引号之外。
Double quote characters have no special meaning inside a pair of single quote marks.
双引号字符在一对单引号内没有特殊意义。
All characters enclosed between a pair of double quote marks (""), except a double quote, are quoted.
引用双引号之外的所有双引号（“”）之间的字符。
Single quote characters have no special meaning inside a pair of double quote marks.
单引号在一对双引号内没有特殊的含义。
A quoted part can start or end anywhere in the variable.
引用的部分可以在变量的任何位置开始或结束。
White-space characters have no special meaning when quoted -- they are included in the option like any other character and do not mark white-space boundaries.
引用时，空白字符没有特殊含义 - 它们与任何其他字符一样包含在选项中，并且不标记空白字符边界。
The pair of quote marks is not included in the option.
该选项中不包含该引号。
JNI_CreateJavaVM (in the JNI Invocation API) will prepend these options to the options supplied in its JavaVMInitArgs argument. Platforms may disable this feature in cases where security is a concern; for example, the Reference Implementation disables this feature on Unix systems when the effective user or group ID differs from the real ID. This feature is intended to support the initialization of tools -- specifically including the launching of native or Java programming language agents. Multiple tools may wish to use this feature, so the variable should not be overwritten, instead, options should be appended to the variable. Note that since the variable is processed at the time of the JNI Invocation API create VM call, options processed by a launcher (e.g., VM selection options) will not be handled.
JNI_CreateJavaVM（在JNI Invocation API中）将为这些选项提供其JavaVMInitArgs参数中提供的选项。 在担心安全问题的情况下，平台可能会禁用此功能; 例如，当有效用户或组ID与实际ID不同时，参考实施将在Unix系统上禁用此功能。 此功能旨在支持工具的初始化，特别是启动本地或Java编程语言代理。 多个工具可能希望使用此功能，因此该变量不应被覆盖，而应将选项附加到该变量。 请注意，由于在JNI Invocation API时处理变量以创建VM呼叫，因此不会处理由启动器处理的选项（例如，VM选择选项）。

Environments
环境
The JVM TI specification supports the use of multiple simultaneous JVM TI agents. Each agent has its own JVM TI environment. That is, the JVM TI state is separate for each agent - changes to one environment do not affect the others. The state of a JVM TI environment includes:
JVM TI规范支持使用多个同时进行的JVM TI代理。 每个代理都有自己的JVM TI环境。 也就是说，JVM TI状态对于每个代理是分开的 - 对一个环境的更改不会影响其他环境。 JVM TI环境的状态包括：
the event callbacks
事件回调
the set of events which are enabled
启用的事件集
the capabilities
能力
the memory allocation/deallocation hooks
内存分配/释放钩子
Although their JVM TI state is separate, agents inspect and modify the shared state of the VM, they also share the native environment in which they execute. As such, an agent can perturb the results of other agents or cause them to fail. It is the responsibility of the agent writer to specify the level of compatibility with other agents. JVM TI implementations are not capable of preventing destructive interactions between agents. Techniques to reduce the likelihood of these occurrences are beyond the scope of this document.
虽然他们的JVM TI状态是分开的，但代理检查和修改VM的共享状态，它们也共享它们执行的本地环境。 因此，代理可以扰乱其他代理的结果或导致其失败。 代理作者有责任指定与其他代理商的兼容性级别。 JVM TI实现不能防止代理之间的破坏性交互。 减少这些事件的可能性的技术超出了本文件的范围。
An agent creates a JVM TI environment by passing a JVM TI version as the interface ID to the JNI Invocation API function GetEnv. See Accessing JVM TI Functions for more details on the creation and use of JVM TI environments. Typically, JVM TI environments are created by calling GetEnv from Agent_OnLoad.
代理创建JVMTI环境通过JNI接口API中GetEnv函数指定JVMTI版本号来创建.有关创建和使用JVM TI环境的更多详细信息，请参阅访问JVM TI功能。 通常，通过从Agent_OnLoad调用GetEnv创建JVM TI环境。

Bytecode Instrumentation
字节码
This interface does not include some events that one might expect in an interface with profiling support. Some examples include object allocation events and full speed method enter and exit events. The interface instead provides support for bytecode instrumentation, the ability to alter the Java virtual machine bytecode instructions which comprise the target program. Typically, these alterations are to add "events" to the code of a method - for example, to add, at the beginning of a method, a call to MyProfiler.methodEntered(). Since the changes are purely additive, they do not modify application state or behavior. Because the inserted agent code is standard bytecodes, the VM can run at full speed, optimizing not only the target program but also the instrumentation. If the instrumentation does not involve switching from bytecode execution, no expensive state transitions are needed. The result is high performance events. This approach also provides complete control to the agent: instrumentation can be restricted to "interesting" portions of the code (e.g., the end user's code) and can be conditional. Instrumentation can run entirely in Java programming language code or can call into the native agent. Instrumentation can simply maintain counters or can statistically sample events.
此接口不包括在具有分析支持的界面中可能期望的某些事件。一些示例包括对象分配事件和全速方法的进入和退出事件。该接口代替提供对字节码检测的支持，能够改变构成目标程序的Java虚拟机字节码指令。通常，这些更改是将“事件”添加到方法的代码中 - 例如，在方法开头添加对MyProfiler.methodEntered（）的调用。由于这些更改纯粹是加法的，它们不会修改应用程序状态或行为。由于插入的代理代码是标准字节码，VM可以全速运行，不仅优化目标程序，还优化了仪器。如果仪器不涉及从字节码执行切换，则不需要昂贵的状态转换。结果是高性能事件。该方法还为代理提供完全的控制：仪器可以限于代码的“有趣”部分（例如，最终用户的代码），并且可以是有条件的。仪器可以完全以Java编程语言代码运行，也可以调用本机代理。仪器可以简单地维护计数器或者可以统计地采样事件。
Instrumentation can be inserted in one of three ways:
仪器可以通过以下三种方式之一插入：
Static Instrumentation: The class file is instrumented before it is loaded into the VM - for example, by creating a duplicate directory of *.class files which have been modified to add the instrumentation. This method is extremely awkward and, in general, an agent cannot know the origin of the class files which will be loaded.
静态仪器：在将文件加载到VM中之前，类文件进行了检测 - 例如，通过创建已经修改以添加仪器的* .class文件的重复目录。 这种方法非常尴尬，一般来说，代理不能知道将要加载的类文件的起源。
Load-Time Instrumentation: When a class file is loaded by the VM, the raw bytes of the class file are sent for instrumentation to the agent. The ClassFileLoadHook event, triggered by the class load, provides this functionality. This mechanism provides efficient and complete access to one-time instrumentation.
加载时间测试：当虚拟机加载类文件时，发送类文件的原始字节用于代理程序。 由类加载触发的ClassFileLoadHook事件提供了此功能。 这种机制提供了一次性仪器的高效和完整的访问。
Dynamic Instrumentation: A class which is already loaded (and possibly even running) is modified. This optional feature is provided by the ClassFileLoadHook event, triggered by calling the RetransformClasses function. Classes can be modified multiple times and can be returned to their original state. The mechanism allows instrumentation which changes during the course of execution.
The class modification functionality provided in this interface is intended to provide a mechanism for instrumentation (the ClassFileLoadHook event and the RetransformClasses function) and, during development, for fix-and-continue debugging (the RedefineClasses function).
动态仪器：已经加载（甚至可能甚至运行）的类被修改。 该可选功能由ClassFileLoadHook事件提供，通过调用RetransformClasses函数触发。 类可以修改多次，可以恢复到原来的状态。 该机制允许在执行过程中发生变化的仪器。
此接口中提供的类修改功能旨在提供一种用于检测的机制（ClassFileLoadHook事件和RetransformClasses函数），并在开发过程中提供修复和继续调试（RedefineClasses函数）。
Care must be taken to avoid perturbing dependencies, especially when instrumenting core classes. For example, an approach to getting notification of every object allocation is to instrument the constructor on Object. Assuming that the constructor is initially empty, the constructor could be changed to:
必须注意避免干扰依赖，特别是在核心课程时。 例如，获取每个对象分配的通知的方法是在Object上调用构造函数。 假设构造函数最初是空的，构造函数可以改为：
      public Object() {
        MyProfiler.allocationTracker(this);
      }

However, if this change was made using the ClassFileLoadHook event then this might impact a typical VM as follows: the first created object will call the constructor causing a class load of MyProfiler; which will then cause object creation, and since MyProfiler isn't loaded yet, infinite recursion; resulting in a stack overflow. A refinement of this would be to delay invoking the tracking method until a safe time. For example, trackAllocations could be set in the handler for the VMInit event.
但是，如果使用ClassFileLoadHook事件进行此更改，则可能会影响典型的VM，如下所示：第一个创建的对象将调用构造函数，导致MyProfiler的类加载; 这将导致对象创建，并且由于MyProfiler尚未加载，无限递归; 导致堆栈溢出。 这样做的改进将是延迟调用跟踪方法直到安全的时间。 例如，可以在VMInit事件的处理程序中设置trackAllocations。
      static boolean trackAllocations = false;

      public Object() {
        if (trackAllocations) {
          MyProfiler.allocationTracker(this);
        }
      }

The SetNativeMethodPrefix allows native methods to be instrumented by the use of wrapper methods.
SetNativeMethodPrefix允许使用包装方法对本机方法进行检测。

Modified UTF-8 String Encoding
UTF-8字符编码修改
JVM TI uses modified UTF-8 to encode character strings. This is the same encoding used by JNI. Modified UTF-8 differs from standard UTF-8 in the representation of supplementary characters and of the null character. See the Modified UTF-8 Strings section of the JNI specification for details.
JVM TI使用修改的UTF-8来编码字符串。 这与JNI使用的编码相同。 修改的UTF-8与标准UTF-8在补充字符和空字符的表示中不同。 有关详细信息，请参阅JNI规范的修改后的UTF-8字符串部分。
Specification Context
规格上下文
Since this interface provides access to the state of applications running in the Java virtual machine; terminology refers to the Java platform and not the native platform (unless stated otherwise). For example:
由于该接口提供对在Java虚拟机中运行的应用程序的状态的访问; 术语是指Java平台，而不是本机平台（除非另有说明）。 例如：
"thread" means Java programming language thread.
“线程”是指Java编程语言线程。
"stack frame" means Java virtual machine stack frame.
“堆栈帧”是指Java虚拟机堆栈帧。
"class" means Java programming language class.
“类”是指Java编程语言类。
"heap" means Java virtual machine heap.
“堆”是指Java虚拟机堆。
"monitor" means Java programming language object monitor.
“监视”是指Java编程语言对象监视器。
Sun, Sun Microsystems, the Sun logo, Java, and JVM are trademarks or registered trademarks of Oracle and/or its affiliates, in the U.S. and other countries.
Sun，Sun Microsystems，Sun徽标，Java和JVM是Oracle和/或其附属公司在美国和其他国家/地区的商标或注册商标。




Functions
功能
Accessing Functions
访问功能
Native code accesses JVM TI features by calling JVM TI functions. Access to JVM TI functions is by use of an interface pointer in the same manner as Java Native Interface (JNI) functions are accessed. The JVM TI interface pointer is called the environment pointer.
本地代码通过调用JVM TI功能访问JVM TI功能。 访问JVM的TI功能是通过使用接口指针，与访问Java Native Interface（JNI）功能的方法相同。 JVM TI接口指针称为环境指针。
An environment pointer is a pointer to an environment and has the type jvmtiEnv*. An environment has information about its JVM TI connection. The first value in the environment is a pointer to the function table. The function table is an array of pointers to JVM TI functions. Every function pointer is at a predefined offset inside the array.
环境指针是指向环境的指针，并且具有类型jvmtiEnv *。 环境中有关于其JVM TI连接的信息。 环境中的第一个值是指向函数表的指针。 函数表是一组指向JVM TI函数的指针。 每个函数指针位于数组中的预定义偏移量。
When used from the C language: double indirection is used to access the functions; the environment pointer provides context and is the first parameter of each function call; for example:
当从C语言使用时：双重间接用于访问功能; 环境指针提供上下文，是每个函数调用的第一个参数; 例如：
jvmtiEnv *jvmti;
...
jvmtiError err = (*jvmti)->GetLoadedClasses(jvmti, &class_count, &classes);

When used from the C++ language: functions are accessed as member functions of jvmtiEnv; the environment pointer is not passed to the function call; for example:
当从C ++语言使用时：函数作为jvmtiEnv的成员函数进行访问; 环境指针不传递给函数调用; 例如：
jvmtiEnv *jvmti;
...
jvmtiError err = jvmti->GetLoadedClasses(&class_count, &classes);

Unless otherwise stated, all examples and declarations in this specification use the C language.
A JVM TI environment can be obtained through the JNI Invocation API GetEnv function:
除非另有说明，本说明书中的所有示例和声明都使用C语言。
可以通过JNI Invocation API GetEnv函数获取JVM TI环境：
jvmtiEnv *jvmti;
...
(*jvm)->GetEnv(jvm, &jvmti, JVMTI_VERSION_1_0);

Each call to GetEnv creates a new JVM TI connection and thus a new JVM TI environment. The version argument of GetEnv must be a JVM TI version. The returned environment may have a different version than the requested version but the returned environment must be compatible. GetEnv will return JNI_EVERSION if a compatible version is not available, if JVM TI is not supported or JVM TI is not supported in the current VM configuration. Other interfaces may be added for creating JVM TI environments in specific contexts. Each environment has its own state (for example, desired events, event handling functions, and capabilities). An environment is released with DisposeEnvironment. Thus, unlike JNI which has one environment per thread, JVM TI environments work across threads and are created dynamically.
每次调用GetEnv创建一个新的JVM TI连接，从而创建一个新的JVM TI环境。 GetEnv的版本参数必须是JVM TI版本。 返回的环境可能具有与请求的版本不同的版本，但返回的环境必须兼容。 如果兼容版本不可用，则如果不支持JVM TI或当前VM配置不支持JVM TI，GetEnv将返回JNI_EVERSION。 可以添加其他接口用于在特定上下文中创建JVM TI环境。 每个环境都有自己的状态（例如，所需的事件，事件处理功能和功能）。 DisposeEnvironment发布环境。 因此，与每个线程有一个环境的JNI不同，JVM TI环境可以跨线程工作，并且是动态创建的。

Function Return Values
功能返回值
JVM TI functions always return an error code via the jvmtiError function return value. Some functions can return additional values through pointers provided by the calling function. In some cases, JVM TI functions allocate memory that your program must explicitly deallocate. This is indicated in the individual JVM TI function descriptions. Empty lists, arrays, sequences, etc are returned as NULL.
JVM TI函数总是通过jvmtiError函数返回值返回错误代码。 一些函数可以通过调用函数提供的指针返回附加值。 在某些情况下，JVM TI功能分配您的程序必须显式解除分配的内存。 这在单个JVM TI功能描述中指示。 空列表，数组，序列等返回为NULL。
In the event that the JVM TI function encounters an error (any return value other than JVMTI_ERROR_NONE) the values of memory referenced by argument pointers is undefined, but no memory will have been allocated and no global references will have been allocated. If the error occurs because of invalid input, no action will have occurred.
如果JVM TI功能遇到错误（除JVMTI_ERROR_NONE之外的任何返回值），参数指针引用的内存值未定义，但不会分配任何内存，并且不会分配全局引用。 如果由于输入无效而发生错误，则不会发生任何操作。

Managing JNI Object References
管理JNI对象引用
JVM TI functions identify objects with JNI references (jobject and jclass) and their derivatives (jthread and jthreadGroup). References passed to JVM TI functions can be either global or local, but they must be strong references. All references returned by JVM TI functions are local references--these local references are created during the JVM TI call. Local references are a resource that must be managed (see the JNI Documentation). When threads return from native code all local references are freed. Note that some threads, including typical agent threads, will never return from native code. A thread is ensured the ability to create sixteen local references without the need for any explicit management. For threads executing a limited number of JVM TI calls before returning from native code (for example, threads processing events), it may be determined that no explicit management is needed. However, long running agent threads will need explicit local reference management--usually with the JNI functions PushLocalFrame and PopLocalFrame. Conversely, to preserve references beyond the return from native code, they must be converted to global references. These rules do not apply to jmethodID and jfieldID as they are not jobjects.
Prerequisite State for Calling Functions
JVM TI功能使用JNI引用（jobject和jclass）及其派生（jthread和jthreadGroup）来标识对象。传递给JVM TI函数的引用可以是全局或本地的，但它们必须是强引用。 JVM TI函数返回的所有引用都是本地引用 - 这些本地引用在JVM TI调用期间创建。本地引用是必须被管理的资源（参见JNI文档）。当线程从本地代码返回时，所有本地引用都被释放。请注意，一些线程（包括典型的代理线程）永远不会从本地代码返回。线程被确保能够创建十六个本地引用，而不需要任何明确的管理。对于从本地代码（例如，线程处理事件）返回之前执行有限数量的JVM TI调用的线程，可以确定不需要显式管理。但是，长时间运行的代理线程将需要显式的本地引用管理 - 通常使用JNI函数PushLocalFrame和PopLocalFrame。相反，为了保留超出本地代码返回的引用，它们必须被转换为全局引用。这些规则不适用于jmethodID和jfieldID，因为它们不是jobjects。
调用功能的前提条件

Unless the function explicitly states that the agent must bring a thread or the VM to a particular state (for example, suspended), the JVM TI implementation is responsible for bringing the VM to a safe and consistent state for performing the function.
Exceptions and Functions
除非函数明确声明代理必须将线程或VM带到特定状态（例如，挂起），否则JVM TI实现负责将VM置于安全和一致的状态以执行该功能。
异常和功能

JVM TI functions never throw exceptions; error conditions are communicated via the function return value. Any existing exception state is preserved across a call to a JVM TI function. See the Java Exceptions section of the JNI specification for information on handling exceptions.
JVM TI功能从不抛出异常; 错误条件通过函数返回值传递。 任何现有的异常状态都会在对JVM TI功能的调用中保留。 有关处理异常的信息，请参阅JNI规范的Java异常部分。
